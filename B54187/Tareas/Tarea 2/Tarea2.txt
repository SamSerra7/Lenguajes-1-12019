Tarea #2

Leer los capítulos 2 y 3 de Clean Code. Hacer un pull request (PR) en el repositorio con su carné donde se apliquen 5 tips de cada uno de los capítulos, por lo tanto serían 10 tips al menos.

Capítulo 2

1- Nombres con sentido: El nombre de una variable, función o clase debe indicar por qué existe, qué hace y cómo se usa.

Correcto:
 int vehicleIterator;
Incorrecto: 
int iterator;

2- Realizar distinciones con sentido: No utilizar palabras como variable o table para nombrar variables.

Correcto: 
int firstVehicle;
int secondVehicle;
Incorrecto:   
int v1;
int v2;

3- Usar nombres que se puedan pronunciar.

Correcto:
int firstVehicle;
Incorrecto:
int fVeh;

4-  Evitar asignaciones mentales: No utilizar letras o nombres que los demás no van a entender. Por ejemplo no usar “i” o “j” en los bucles.

Correcto:
int vehicleIterator;
        int vehicleCounter = 0;
        for (vehicleIterator = 0; vehicleIterator < vehicleRegister.size(); vehicleIterator++) {
            vehicleCounter++;
        }
Incorrecto:
 int i;
        int vehicleCounter = 0;
        for (i = 0; i < vehicleRegister.size(); i++) {
            vehicleCounter++;
        }

5- Nombres de clases: Deben tener nombres o frases, no se usan verbos.

Correcto:
public class Vehicle {
}
Incorrecto:
public class VehicleCounter {
}

Capítulo 3

1- Tamaño reducido: Las funciones deben tener tamaño reducido, debido a que la experiencia confirma funcionan mucho mejor que las que tienen muchas líneas.

Correcto: 
  public int vehicleCounter(ArrayList vehicleRegister) {

        int vehicleIterator;
        int vehicleCounter = 0;
        for (vehicleIterator = 0; vehicleIterator < vehicleRegister.size(); vehicleIterator++) {
            vehicleCounter++;
        }
        return vehicleCounter;
    }


Incorrecto:
 public int vehicleCounter() {
        ArrayList vehicleRegister = new ArrayList<>();
        String fistVehicle = "Kia";
        String secondVehicle = "Audi";
        
        vehicleRegister.add(fistVehicle);
        vehicleRegister.add(secondVehicle);
        
        int vehicleIterator;
        int vehicleCounter = 0;
        
        ArrayList<Vehicle> nissanRegister = new ArrayList<Vehicle>();
        for (vehicleIterator = 0; vehicleIterator < vehicleRegister.size(); vehicleIterator++) {
            vehicleCounter++;
        }
        return vehicleCounter;
    }


2 - Bloques y sangría: Los bloques if, else, while y similares deben tener una línea de longitud que sea la invocación de una función. De esta forma, no solo se reduce el tamaño de la función sino que se evitan funciones anidadas no deseadas.

Correcto: 
  if (vehicleRegister.get(vehicleCounter).equals("Nissan")) {
            nissanCounter++;
        }
            if (vehicleRegister.get(vehicleCounter).equals("Toyota")) {
                 toyotaCounter++;
             }

Incorrecto:
 if(vehicleRegister.get(vehicleCounter).equals("Nissan")){
             nissanCounter ++;
         }
if(vehicleRegister.get(vehicleCounter).equals("Toyota")){
             toyotaCounter ++;
         }

3- Hacer una cosa: Una función debería solo realizar una serie de pasos para un solo objetivo o una sola cosa con la cual fue nombrada.

Correcto: 
public int vehicleCounter(ArrayList vehicleRegister) {

        int vehicleIterator;
        int vehicleCounter = 0;
        for (vehicleIterator = 0; vehicleIterator < vehicleRegister.size(); vehicleIterator++) {
            vehicleCounter++;
        }
        return vehicleCounter;
    }


Incorrecto: 
 public int vehicleCounter(ArrayList vehicleRegister) {

        int vehicleIterator;
        int vehicleCounter = 0;
        ArrayList<Vehicle> nissanRegister = new ArrayList<Vehicle>();
        for (vehicleIterator = 0; vehicleIterator < vehicleRegister.size(); vehicleIterator++) {
            vehicleCounter++;
            if (vehicleRegister.get(vehicleCounter).equals("Nissan")) {
                nissanRegister.add((Vehicle) vehicleRegister.get(vehicleCounter));
            }
        }
        return vehicleCounter;
    }

4- Verbos y palabras claves: La selección de nombres correctos mejora la explicación de su cometido, así como el orden y el cometido de los argumentos.

Correcto:
public Vehicle comparacionVehiculos(Vehicle registrado, Vehicle nuevo){
 }
Incorrecto:
public Vehicle comparacion(Vehicle vehiculo1, Vehicle vehiculo2){
}    


5- Formas monádicas habituales

Correcto:
public boolean vehicleExists(Vehicle vehicleAsked){    
}

Incorrecto:
public boolean exists (Vehicle vehicle){   
}
